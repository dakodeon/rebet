#+TITLE: Rebet.el -- Manage my rebetika collection
#+AUTHOR: dakodeon
#+EMAIL: dakodeon@hotmail.com

* REBET

** OVERVIEW
   
   Organizing things a little bit better each time...

   Each code block will be tangled to a separate file.

   The files will each cover a specific piece of functonality.

** CODE
   
*** Variables

    All the varables used for the package.

    #+NAME: rebet-variables
    #+begin_src emacs-lisp :tangle "rebet-variables.el" :comments link
    ;;; rebet-variables

    ;;; Code:

    (defvar rebet-default-dir "~/Music/Ρεμπέτικα"
      "The default directory where songs are stored.")

    (defvar rebet-dirs-list nil
      "An optional list of additional directories where rebetika are stored,
			besides `rebet-default-dir', eg some download dir.
			Optionally, you can include the value of
			`rebet-default-dir` for consistency.")

    (defvar rebet-lyrics-file "~/stixoi.org"
      "The default file for rebetika lyrics.
	  It should be an org file.")

    (defvar rebet--ref-file "~/Music/Ρεμπέτικα/.ref-list"
      "Where to store the reference list used for searching and
		  building autocomp lists")

    ;; dictionary -- NOTE: cmd-opt is deprecated
    (setplist 'rebet--title
	      '(tagname "title" propname "ITEM"
			val nil cmd-opt "-t " eye-opt "--title "))
    (setplist 'rebet--composer
	      '(tagname "composer" propname "ΣΥΝΘΕΤΗΣ"
			val nil cmd-opt "-c " eye-opt "--text-frame=TCOM:" autocomp-lst nil))
    (setplist 'rebet--artist
	      '(tagname "artist" propname "ΤΡΑΓΟΥΔΙΣΤΗΣ"
			val nil cmd-opt "-a " eye-opt "--artist " autocomp-lst nil))
    (setplist 'rebet--rhythm
	      '(tagname "rhythm" propname "ΡΥΘΜΟΣ"
			val nil cmd-opt "-r " eye-opt "--text-frame=rhythm:" autocomp-lst nil))
    (setplist 'rebet--dromos
	      '(tagname "dromos" propname "ΔΡΟΜΟΣ"
			val nil cmd-opt "-d " eye-opt "--text-frame=dromos:" autocomp-lst nil))
    (setplist 'rebet--tone
	      '(tagname "tone" propname "ΤΟΝΟΣ"
			val nil cmd-opt "-n " eye-opt "--text-frame=tone:" autocomp-lst
			("Ντο" "Ντο#" "Ρε" "Ρε#" "Μι" "Φα" "Φα#" "Σολ" "Σολ#" "Λα" "Λα#" "Σι")))
    (setplist 'rebet--year
	      '(tagname "date" propname "ΕΤΟΣ_ΗΧΟΓΡ"
			val nil cmd-opt "-y " eye-opt "--release-year "))

    (defvar rebet--attributes
      '(rebet--title rebet--composer rebet--artist
		     rebet--rhythm rebet--dromos rebet--tone rebet--year))

    (provide 'rebet-variables)
    ;;; rebet-varables.el ends here
    #+end_src

*** Fetch and write ID3 tags

    The backbone of the package. These functions use the ffprobe and eyeD3
    programs to fetch and set ID3 tags respectively. They are defined here
    together, as most of other functions will use one of these.

    #+NAME: rebet-backbone
    #+begin_src emacs-lisp :tangle "rebet-backbone.el" :comments link
    ;;; Code:

    (defun rebet--get-data-from-id3 (path)
      "Returns an alist based on the ID3 tags of file in PATH."
      (mapcar (lambda (x)
		(let ((pair (split-string x "=" t "TAG:")))
		  (cons (car pair) (nth 1 pair))))
	      (seq-remove (lambda (str) (string-match-p "FORMAT" str))
			  (process-lines
			   "ffprobe" "-loglevel" "error" "-show_entries"
			   "format_tags=title,composer,artist,rhythm,dromos,tone,date"
			   (expand-file-name path)))))

    (defun rebet--set-tags (path val-list)
      "Set the id3 tags of the file in PATH, using values from VAL-LIST.
	   VAL-LIST should be of the form ((<tag> . <value>)).
       Uses the eyeD3 program."
      (let ((optlist (mapcar
		      (lambda (attr)
			(cons (get attr 'eye-opt) (cdr (assoc (get attr 'tagname) val-list))))
		      (seq-remove (lambda (x)
				    (not (cdr (assoc (get x 'tagname) val-list))))
				  rebet--attributes)))
	    (path (expand-file-name path)))
	(shell-command (concat "eyeD3 " (shell-quote-argument path) " "
			       (mapconcat
				(lambda (x)
				  (concat (car x) (shell-quote-argument (cdr x))))
				optlist " ") " >/dev/null"))))

    (provide 'rebet-backbone)

    ;;; rebet-backbone.el ends here
    #+end_src
    
*** Reference file functioality

    The reference file is used to coordinate all the aspects of the
    functionality. It stores a list of file paths, alongside with all ID3
    information associated with these.

    This file is used to provide a quick way of finding a specific piece of
    metadata, without the need to query each file individually, which would
    take considerably more time. Instead, the file is generated once (which
    takes some time to finish) and after that it is updated with each
    change of a file name or tag.

    #+NAME: rebet-ref
    #+begin_src emacs-lisp :tangle "rebet-ref.el" :comments link
    ;;; Code:

    (require 'rebet-variables)
    (require 'rebet-backbone)

    (defun rebet--ref-get-path (ln)
      (if (string-match-p "path" ln)
	  (replace-regexp-in-string "path:" ""
				    (seq-find (lambda (x) (string-match-p "path:" x))
					      (split-string ln "|" t)))))

    (defun rebet--ref-line-format (path var-list)
      "Formats the string to put in ref file."
      (concat "|" (mapconcat
		   (lambda (x) (concat (car x) ":" (cdr x)))
		   var-list "|")
	      "|path:" path))

    (defun rebet--ref-remove-lines (match)
      "Remove lines containing MATCH from ref-file."
      (let ((ref-file (expand-file-name rebet--ref-file)))
	(unless (file-exists-p ref-file)
	  (user-error "Error: the reference file was not found (%s)" ref-file))
	(with-temp-file ref-file
	  (insert-file-contents ref-file)
	  (flush-lines match (point-min) (point-max)))))

    (defun rebet-ref-remove-nonexistent ()
      "Removes entries with non-existent paths from the reference file."
      (interactive)
      (let ((ref-file (expand-file-name rebet--ref-file)))
	(unless (file-exists-p ref-file)
	  (user-error "Error: the reference file was not found (%s)" ref-file))
	(with-temp-file ref-file
	  (insert-file-contents ref-file)
	  (mapc (lambda (ln)
		  (let ((path (rebet--ref-get-path ln)))
		    (message "%s" path)
		    (if path (unless (file-exists-p path)
			       (flush-lines path (point-min) (point-max))))))
		(split-string (buffer-string) "\n")))))

    (defun rebet-mk-ref (&optional path)
      "Writes lines to `rebet--ref-file'. If PATH is not set, it will
      act on every mp3 file in `rebet-default-dir' recursively. If
      PATH is a directory, it will act in all .mp3 files in there,
      non-recursively. If PATH corresponds to a single file, it will
      act only on this file. With a prefix argument it replaces the
      file with the new content.

    For the exact line formatting, see `rebet--ref-line-format'"
      (interactive)
      (let ((ref-file (expand-file-name rebet--ref-file))
	    (path (if (not path)
		      (directory-files-recursively (expand-file-name rebet-default-dir) "mp3")
		    (if (file-directory-p path)
			(directory-files (expand-file-name path) t "mp3")
		      (if (file-exists-p path)
			  (list (expand-file-name path)))))))
	(if current-prefix-arg (delete-file ref-file))
	(if path
	    (with-temp-file ref-file
	      (if (file-exists-p ref-file) (insert-file-contents ref-file))
	      (mapc (lambda (file)
		      (message "%s" file)
		      (flush-lines file (point-min) (point-max))
		      (insert
		       (concat (rebet--ref-line-format file (rebet--get-data-from-id3 file)) "\n")))
		    path)))))

    (defun rebet--make-ref-lists ()
      "Makes the reference lists according to the contents of
	      `rebet--ref-file'."
      (unless (file-exists-p rebet--ref-file)
	(user-error
	 "ERROR: The file \"%s\" does not exist. Run M-x rebet-update-all-refs"
	 rebet--ref-file))
      (with-temp-buffer
	(insert-file-contents (expand-file-name rebet--ref-file))
	(mapc (lambda (attr)
		(put attr 'autocomp-lst
		     (remove
		      ""
		      (delete-dups
		       (mapcar
			(lambda (ln)
			  (let ((rgx (concat "^.*" (get attr 'tagname) ":\\||.*$")))
			    (replace-regexp-in-string rgx "" ln)))
			(split-string (buffer-string) "\n"))))))
	      (seq-remove (lambda (x)
			    (or
			     (not (member 'autocomp-lst (symbol-plist x)))
			     (string= (get x 'tagname) "tone")))
			  rebet--attributes))))

    (provide 'rebet-ref)

    ;;; rebet-ref.el ends here
    #+end_src
    
*** File actions

    In this part are included all the actions upon files. These are the
    renaming functions, as well as the user interface functions with
    =rebet--set-tags=.

    #+NAME: rebet-file-actions
    #+begin_src emacs-lisp :tangle "rebet-file-actions.el" :comments link
    ;;; Code:

    (require 'rebet-variables)
    (require 'rebet-backbone)
    (require 'rebet-ref)

    (defun rebet--make-name-string (val-list)
      "Formats the string for file names using values in VAL-LIST.
       Naming is of the form:
       - <artist> - <title>, if <composer> is nil, or if <composer> is the same as <artist>
       - <composer> (<artist>) - <title> otherwise.
       If <title> or both <artist> and <composer> are nil, the name is also nil."
      (let* ((artist (cdr (assoc "artist" val-list)))
	     (composer (cdr (assoc "composer" val-list)))
	     (title (cdr (assoc "title" val-list)))
	     (creators (if artist
			   (if (or (not composer) (string= composer artist))
			       artist
			     (concat composer " (" artist ")")))))
	(if (and title creators)
	    (concat creators " - " title))))

    (defun rebet--rename (path)
      "Renames a file in PATH according to its ID3 tags.
       Renaming occurs only if the current file name is different from
       the new file name and the file has an mp3 extension. If the file is finally renamed, the entry associated with it in ref-file gets also updated.
       See `rebet--make-name-string' for the formatting of the file name."
      (let* ((path (expand-file-name path))
	     (oldname (file-name-base path))
	     (dir (file-name-directory path))
	     (ext (file-name-extension path))
	     (newname (rebet--make-name-string (rebet--get-data-from-id3 path)))
	     (newpath (concat dir newname "." ext)))

	(unless (or (not newname) (string= oldname newname))
	  (rename-file path newpath)
	  (rebet--ref-remove-lines path)
	  (rebet-mk-ref newpath))))

    (defun rebet-dired-tags ()
      "Prompts to set tags of marked files of dired buffer, also
	    renaming the files if necessary. With prefix argument omits the
	    renaming part. 
	  Throws errors if called from non-dired buffer or if the marked files
	    contain non-mp3 files."
      (interactive)
      (unless (eq major-mode 'dired-mode)
	(user-error "Error: Not in dired buffer."))
      (rebet--make-ref-lists)
      (let ((files (dired-get-marked-files)))
	(mapc (lambda (file) (unless (string= (file-name-extension file) "mp3")
			       (user-error "Error: Selection contains non-mp3 files.")))
	      files)
	(mapc (lambda (file)
		(let* ((def-values (rebet--get-data-from-id3 file))
		       (fname (file-name-base file))
		       (new-values (delete nil (mapcar
						(lambda (attr)
						  (let* ((tag (get attr 'tagname))
							 (defval (cdr (assoc tag def-values)))
							 (newval (completing-read
								  (concat fname " | Set " tag ": ")
								  (get attr 'autocomp-lst)
								  nil nil defval)))
						    (unless (string= newval "")
						      (cons tag newval))))
						rebet--attributes))))
		  (rebet--set-tags file new-values)
		  (unless current-prefix-arg
		    (rebet--rename file))))
	      files)
	(revert-buffer)))

    (defun rebet-dired-tag-to-all ()
      "Change a single ID3 tag to multiple files. Acts on the marked
    files of the current dired buffer."
      (interactive)
      (unless (eq major-mode 'dired-mode)
	(user-error "Error: Not in dired buffer."))
      (rebet--make-ref-lists)
      (let* ((files (dired-get-marked-files))
	     (tag (completing-read "Which tag? "
				   (mapcar (lambda (x) (get x 'tagname)) rebet--attributes) nil t))
	     (attr (seq-find (lambda (x) (string= (get x 'tagname) tag)) rebet--attributes))
	     (val (completing-read (concat "Set " tag " value: ")
				   (get attr 'autocomp-lst))))
	(mapc (lambda (file)
		(rebet--set-tags file (list (cons tag val)))
		(rebet--rename file))
	      files)
	(revert-buffer)))

    (defun rebet-change-tag-everywhere ()
      "Change the value of a tag for each file in ref-file."
      (interactive)
      (rebet--make-ref-lists)
      (let* ((ref-file (expand-file-name rebet--ref-file))
	     (tag (completing-read "Which tag? "
				   (mapcar (lambda (x) (get x 'tagname)) rebet--attributes) nil t))
	     (attr (seq-find (lambda (x) (string= (get x 'tagname) tag)) rebet--attributes))
	     (oldval (completing-read (concat tag " value to change: ")
				      (get attr 'autocomp-lst) nil t))
	     (newval (completing-read (concat "Change " tag " \"" oldval "\" to: ")
				      (get attr 'autocomp-lst))))
	(unless (string= oldval newval)
	  (with-temp-buffer
	    (insert-file-contents ref-file)
	    (let ((matching (mapcar
			     (lambda (ln)
			       (replace-regexp-in-string
				"path:" ""
				(seq-find (lambda (x) (string-match-p "path:" x))
					  (split-string ln "|"))))
			     (seq-remove
			      (lambda (x) (not (string-match-p (concat tag ":" oldval) x)))
			      (split-string (buffer-string) "\n")))))
	      (mapc (lambda (path)
		      (if (file-exists-p path)
			  (progn
			    (rebet--set-tags path (list (cons tag newval)))
			    (rebet--rename path))))
		    matching))))))

    (provide 'rebet-file-actions)

    ;;; rebet-file-actions.el ends here
    #+end_src
    
*** Stray code

    Stray code in need of a home! These chunks will eventually be used but
    they haven't found their place yet.

    #+NAME: rebet-stray
    #+begin_src emacs-lisp :tangle "rebet-stray.el" :comments link
    ;;; Code

    (require 'rebet-variables)
    (require 'rebet-backbone)

    ;; this function will be used when searching for a song file. It
    ;; temporarily sets the fzf command to point to the directories containing
    ;; the files.
    (defun rebet--set-fzf-cmd ()
      "Builds the string for the default fzf command used to search
		     for rebetika."
      (concat "FZF_DEFAULT_COMMAND=find "
	      (mapconcat 'identity
			 (delete-dups
			  (push rebet-default-dir rebet-dirs-list)) " ")
	      " -name \"*.mp3\""))

    ;;; the next 2 functions belong to the yet-to-be section about the lyrics file. I still have to write the props-to-tags function
    (defun rebet-tags-to-props (&optional path)
      "Works only in `rebet-lyrics-file'. Reads ID3 tags from a
	    selected mp3 file and converts them to org-properties in the
	    entry at point. It also updates the heading, in case it
	    differs from the actual title. If PATH is specified, it reads
	    from this file, else it calls counsel-fzf."
      (interactive)
      (unless (string= buffer-file-name (expand-file-name rebet-lyrics-file))
	(user-error "Error: Not in the lyrics file (%s)" rebet-lyrics-file))
      (let* ((process-environment (cons (rebet--set-fzf-cmd)
					process-environment))
	     (path (if path (expand-file-name path)
		     (l/counsel-fzf-as-text "Get props from: ")))
	     (song-data (rebet--get-data-from-id3 path))
	     (entry-data (org-entry-properties)))
	(mapc (lambda (attr)
		(org-set-property
		 (get attr 'propname) (cdr (assoc (get attr 'tagname) song-data))))
	      (seq-remove (lambda (x) (string= (get x 'tagname) "title"))
			  rebet--attributes))
	(mapc (lambda (x)
		(if (string-match-p "^ *$" (cdr (assoc (get x 'propname)
						       (org-entry-properties))))
		    (org-delete-property (get x 'propname))))
	      rebet--attributes)
	(org-edit-headline (cdr (assoc "title" song-data))))
      ;; do not update data -- thought: maybe use rebet-autocompletion?
      (if mark-active (deactivate-mark t)))

    (defun rebet-tags-to-props-and-back (&optional path)
      "Sequentially calls `rebet-tags-to-props' and
	    `rebet-org-to-tags' on a specified file. If PATH is set it
	    acts on this file, if not, it calls counsel-fzf."
      (interactive)
      (let* ((process-environment
	      (cons (rebet--set-fzf-cmd) process-environment))
	     (path (if path (expand-file-name path)
		     (l/counsel-fzf-as-text "Props come and go :"))))
	(rebet-tags-to-props path)
	(rebet-props-to-tags path)))

    ;; this function provides a simple interface to my shell script, which is no longer used. It is kept as legacy.
    (defun rebet-dired-mp3-tag-editor ()
      "Simple interface directly to the mp3-tag-editor shell script,
	    using `make-term'. No completions and no updating lists etc
	    with new values. Acts on the marked files of the current dired
	    buffer."
      (interactive)
      (let ((files (dired-get-marked-files)))
	(apply 'make-term "mp3-tag-editor" "sh" nil "mp3-tag-editor" "-ER" files)
	(switch-to-buffer-other-window "*mp3-tag-editor*")))

    (provide 'rebet-stray)

    ;;; rebet-stray.el ends here
    #+end_src
*** Rebet main

    #+NAME: rebet
    #+begin_src emacs-lisp :tangle "rebet.el" :comments link
    ;;; rebet.el -- manage mp3 collections with ID3 tags

    ;; author: dakodeon

    ;;; Commentary:

    ;; Provides a consistent interface to manage the ID3 tags of a music
    ;; collection, while also keeping an org mode lyrics file, in which the
    ;; entries are linked to their corresponding mp3 files.

    ;;; Code

    (require 'dired)
    (require 'org)
    (require 'counsel)

    (require 'rebet-variables)
    (require 'rebet-backbone)
    (require 'rebet-ref)
    (require 'rebet-file-actions)
    (require 'rebet-stray)

    (rebet--make-ref-lists)

    (defun rebet-init ()
      "Does nothing for now..."
      (message "Rebet power!"))

    (provide 'rebet)

    ;;; rebet.el ends here
    #+end_src
    
** CHANGELOG
  
*** [2020-05-26 Tue]

    - Hello World!
    - Functionality achieved:
      - Variables set.
      - Reference file functionality.
      - Changing tags from dired.

   
